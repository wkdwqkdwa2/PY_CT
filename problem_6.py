# 당신은 무한히 많은 행과 열이 있는 곱셈표 위에 서 있다. (i, j)셀에는 정수 ixj 가 적혀 있다. (만약 행과 열이 9개라면 이는 구구단 표와 동일하다.) 현재 당신의 위치는 셀 (1, 1) 이다.
# 당신은 곱셈표의 오른쪽이나 아래쪽 방향으로 이동할 수 있다. 즉, 당신이 (i, j)에 서 있다면, (i+1, j)나 (i, j+1)로 이동할 수 있다.
# 정수 N이 주어질 때, N이 적혀 있는 어떤 셀에 도착하기 위해서 최소 몇 번 움직여야 하는가?
import math

T=int(input())

for test_case in range(T):
    I=int(input())
    x=0
    y=0
    #제곱근의 특성상 나온 값 기준으로 약수의 개수가 대칭을 이루는 것을 이용 예를 들어, N을 입력한다면 N의 제곱근을 기준으로 약수의 개수가 같다.
    for i_case in range(1,int(math.sqrt(I))+1):#제곱근값 또한 약수인 경우가 있기 때문에 더하기 1를 해줌으로써, 충족해준다.        
        if(I%i_case==0):
            x=i_case#입력한 값의 충족한 X의 최솟값이다.         
    y=I/x#x는 입력값의 약수이기 때문
    
    result=x+y-2#(0,0)에서 시작하기 때문에 -2
    print("#{0} {1}".format(test_case+1,int(result)))